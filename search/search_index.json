{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to RoPython! RoPython is a asynchronous wrapper for the Roblox API. Features Installation Warning RoPython is currently in development and should not be used in a production enviroment yet. This is just a fun little side project for me and it will be a while until it is fully ready. Install RoPython using PyPi. Installation must currently be done from git due to the projects development status. $ git clone https://github.com/parker02311/ropython $ cd ropython $ pip install . To remove the installation directory use. Windows: $ cd ..// $ rmdir /Q /S ropython Linux: $ cd ..// $ rmdir ropython","title":"Home"},{"location":"#features","text":"","title":"Features"},{"location":"#installation","text":"Warning RoPython is currently in development and should not be used in a production enviroment yet. This is just a fun little side project for me and it will be a while until it is fully ready. Install RoPython using PyPi. Installation must currently be done from git due to the projects development status. $ git clone https://github.com/parker02311/ropython $ cd ropython $ pip install . To remove the installation directory use. Windows: $ cd ..// $ rmdir /Q /S ropython Linux: $ cd ..// $ rmdir ropython","title":"Installation"},{"location":"reference/__init__/","text":"ropython.__init__ special RobloxClient __author__ special __copyright__ special __license__ special __title__ special","title":"  init  "},{"location":"reference/__init__/#ropython.__init__","text":"","title":"__init__"},{"location":"reference/__init__/#ropython.__init__.RobloxClient","text":"","title":"RobloxClient"},{"location":"reference/__init__/#ropython.__init__.__author__","text":"","title":"__author__"},{"location":"reference/__init__/#ropython.__init__.__copyright__","text":"","title":"__copyright__"},{"location":"reference/__init__/#ropython.__init__.__license__","text":"","title":"__license__"},{"location":"reference/__init__/#ropython.__init__.__title__","text":"","title":"__title__"},{"location":"reference/client/","text":"ropython.client Client Client Source code in ropython/client.py class Client : \"\"\" Client \"\"\" def __init__ ( self , cookie : int = None , proxies : list = None ): \"\"\" Create's the client Attributes: cookie: The Roblox cookie in it's entirety proxies: The proxies of which to send from. This is not required. \"\"\" self . proxise = proxies or {} self . session = requests . Session () self . session . cookies [ \".ROBLOSECURITY\" ] = cookie self . session . headers [ \"x-csrf-token\" ] = get_token () or None def get_token ( self ) -> Optional [ str ]: \"\"\" Get's a x-csrf-token from Roblox which is required for all requests. \"\"\" # This doesn't acutally log you out since we aren't passing in a token r = self . session . post ( \"https://auth.roblox.com/v2/logout\" , cookies = { \".ROBLOSECURITY\" : self . cookie } ) if r . headers [ \"x-csrf-token\" ]: self . token = r . headers [ \"x-csrf-token\" ] return r . headers [ \"x-csrf-token\" ] async def get_experience ( self , UniverseId : int ) -> Experience : \"\"\" Get a experience object which is required to do anything with experiences. Attributes: UniverseId: The ID of the game to get \"\"\" return Experience ( UniverseId ) __init__ ( self , cookie : int = None , proxies : list = None ) special Create's the client Attributes: Name Type Description cookie The Roblox cookie in it's entirety proxies The proxies of which to send from. This is not required. Source code in ropython/client.py def __init__ ( self , cookie : int = None , proxies : list = None ): \"\"\" Create's the client Attributes: cookie: The Roblox cookie in it's entirety proxies: The proxies of which to send from. This is not required. \"\"\" self . proxise = proxies or {} self . session = requests . Session () self . session . cookies [ \".ROBLOSECURITY\" ] = cookie self . session . headers [ \"x-csrf-token\" ] = get_token () or None get_experience ( self , UniverseId : int ) -> Experience async Get a experience object which is required to do anything with experiences. Attributes: Name Type Description UniverseId The ID of the game to get Source code in ropython/client.py async def get_experience ( self , UniverseId : int ) -> Experience : \"\"\" Get a experience object which is required to do anything with experiences. Attributes: UniverseId: The ID of the game to get \"\"\" return Experience ( UniverseId ) get_token ( self ) -> Optional [ str ] Get's a x-csrf-token from Roblox which is required for all requests. Source code in ropython/client.py def get_token ( self ) -> Optional [ str ]: \"\"\" Get's a x-csrf-token from Roblox which is required for all requests. \"\"\" # This doesn't acutally log you out since we aren't passing in a token r = self . session . post ( \"https://auth.roblox.com/v2/logout\" , cookies = { \".ROBLOSECURITY\" : self . cookie } ) if r . headers [ \"x-csrf-token\" ]: self . token = r . headers [ \"x-csrf-token\" ] return r . headers [ \"x-csrf-token\" ]","title":"Client"},{"location":"reference/client/#ropython.client","text":"","title":"client"},{"location":"reference/client/#ropython.client.Client","text":"Client Source code in ropython/client.py class Client : \"\"\" Client \"\"\" def __init__ ( self , cookie : int = None , proxies : list = None ): \"\"\" Create's the client Attributes: cookie: The Roblox cookie in it's entirety proxies: The proxies of which to send from. This is not required. \"\"\" self . proxise = proxies or {} self . session = requests . Session () self . session . cookies [ \".ROBLOSECURITY\" ] = cookie self . session . headers [ \"x-csrf-token\" ] = get_token () or None def get_token ( self ) -> Optional [ str ]: \"\"\" Get's a x-csrf-token from Roblox which is required for all requests. \"\"\" # This doesn't acutally log you out since we aren't passing in a token r = self . session . post ( \"https://auth.roblox.com/v2/logout\" , cookies = { \".ROBLOSECURITY\" : self . cookie } ) if r . headers [ \"x-csrf-token\" ]: self . token = r . headers [ \"x-csrf-token\" ] return r . headers [ \"x-csrf-token\" ] async def get_experience ( self , UniverseId : int ) -> Experience : \"\"\" Get a experience object which is required to do anything with experiences. Attributes: UniverseId: The ID of the game to get \"\"\" return Experience ( UniverseId )","title":"Client"},{"location":"reference/client/#ropython.client.Client.__init__","text":"Create's the client Attributes: Name Type Description cookie The Roblox cookie in it's entirety proxies The proxies of which to send from. This is not required. Source code in ropython/client.py def __init__ ( self , cookie : int = None , proxies : list = None ): \"\"\" Create's the client Attributes: cookie: The Roblox cookie in it's entirety proxies: The proxies of which to send from. This is not required. \"\"\" self . proxise = proxies or {} self . session = requests . Session () self . session . cookies [ \".ROBLOSECURITY\" ] = cookie self . session . headers [ \"x-csrf-token\" ] = get_token () or None","title":"__init__()"},{"location":"reference/client/#ropython.client.Client.get_experience","text":"Get a experience object which is required to do anything with experiences. Attributes: Name Type Description UniverseId The ID of the game to get Source code in ropython/client.py async def get_experience ( self , UniverseId : int ) -> Experience : \"\"\" Get a experience object which is required to do anything with experiences. Attributes: UniverseId: The ID of the game to get \"\"\" return Experience ( UniverseId )","title":"get_experience()"},{"location":"reference/client/#ropython.client.Client.get_token","text":"Get's a x-csrf-token from Roblox which is required for all requests. Source code in ropython/client.py def get_token ( self ) -> Optional [ str ]: \"\"\" Get's a x-csrf-token from Roblox which is required for all requests. \"\"\" # This doesn't acutally log you out since we aren't passing in a token r = self . session . post ( \"https://auth.roblox.com/v2/logout\" , cookies = { \".ROBLOSECURITY\" : self . cookie } ) if r . headers [ \"x-csrf-token\" ]: self . token = r . headers [ \"x-csrf-token\" ] return r . headers [ \"x-csrf-token\" ]","title":"get_token()"},{"location":"reference/experience/","text":"ropython.experience Experience ( Base ) Experience class Source code in ropython/experience.py class Experience ( Base ): \"\"\" Experience class \"\"\" def __init__ ( self , UniverseId : int ): \"\"\" Initializes experience product class Attributes: UniverseId: The ID of the experience you are reading/changing \"\"\" self . Id = UniverseId async def create_developer_product ( self , Name : str , Description : str , Price : int ) -> DeveloperProduct : \"\"\" Create's a developer product in the experience specified when initiating the class. Attributes: Name: The name of the developer product Description: The description of the developer product Price: The price of the developer product \"\"\" response = requests . session . post ( \"https://www.roblox.com/places/developerproducts/add\" , data = { \"universeId\" : self . Id , \"name\" : Name , \"priceInRobux\" : Price , \"description\" : Description }, ) id = re . findall ( r \"\\d\" , BeautifulSoup ( r . text , \"html.parser\" ) . find ( id = \"DeveloperProductStatus\" ) ) return DeveloperProduct ( Data = { \"Id\" : id , \"Name\" : Name , \"Description\" : Description , \"Price\" : Price , }) __init__ ( self , UniverseId : int ) special Initializes experience product class Attributes: Name Type Description UniverseId The ID of the experience you are reading/changing Source code in ropython/experience.py def __init__ ( self , UniverseId : int ): \"\"\" Initializes experience product class Attributes: UniverseId: The ID of the experience you are reading/changing \"\"\" self . Id = UniverseId create_developer_product ( self , Name : str , Description : str , Price : int ) -> DeveloperProduct async Create's a developer product in the experience specified when initiating the class. Attributes: Name Type Description Name The name of the developer product Description The description of the developer product Price The price of the developer product Source code in ropython/experience.py async def create_developer_product ( self , Name : str , Description : str , Price : int ) -> DeveloperProduct : \"\"\" Create's a developer product in the experience specified when initiating the class. Attributes: Name: The name of the developer product Description: The description of the developer product Price: The price of the developer product \"\"\" response = requests . session . post ( \"https://www.roblox.com/places/developerproducts/add\" , data = { \"universeId\" : self . Id , \"name\" : Name , \"priceInRobux\" : Price , \"description\" : Description }, ) id = re . findall ( r \"\\d\" , BeautifulSoup ( r . text , \"html.parser\" ) . find ( id = \"DeveloperProductStatus\" ) ) return DeveloperProduct ( Data = { \"Id\" : id , \"Name\" : Name , \"Description\" : Description , \"Price\" : Price , })","title":"Experience"},{"location":"reference/experience/#ropython.experience","text":"","title":"experience"},{"location":"reference/experience/#ropython.experience.Experience","text":"Experience class Source code in ropython/experience.py class Experience ( Base ): \"\"\" Experience class \"\"\" def __init__ ( self , UniverseId : int ): \"\"\" Initializes experience product class Attributes: UniverseId: The ID of the experience you are reading/changing \"\"\" self . Id = UniverseId async def create_developer_product ( self , Name : str , Description : str , Price : int ) -> DeveloperProduct : \"\"\" Create's a developer product in the experience specified when initiating the class. Attributes: Name: The name of the developer product Description: The description of the developer product Price: The price of the developer product \"\"\" response = requests . session . post ( \"https://www.roblox.com/places/developerproducts/add\" , data = { \"universeId\" : self . Id , \"name\" : Name , \"priceInRobux\" : Price , \"description\" : Description }, ) id = re . findall ( r \"\\d\" , BeautifulSoup ( r . text , \"html.parser\" ) . find ( id = \"DeveloperProductStatus\" ) ) return DeveloperProduct ( Data = { \"Id\" : id , \"Name\" : Name , \"Description\" : Description , \"Price\" : Price , })","title":"Experience"},{"location":"reference/experience/#ropython.experience.Experience.__init__","text":"Initializes experience product class Attributes: Name Type Description UniverseId The ID of the experience you are reading/changing Source code in ropython/experience.py def __init__ ( self , UniverseId : int ): \"\"\" Initializes experience product class Attributes: UniverseId: The ID of the experience you are reading/changing \"\"\" self . Id = UniverseId","title":"__init__()"},{"location":"reference/experience/#ropython.experience.Experience.create_developer_product","text":"Create's a developer product in the experience specified when initiating the class. Attributes: Name Type Description Name The name of the developer product Description The description of the developer product Price The price of the developer product Source code in ropython/experience.py async def create_developer_product ( self , Name : str , Description : str , Price : int ) -> DeveloperProduct : \"\"\" Create's a developer product in the experience specified when initiating the class. Attributes: Name: The name of the developer product Description: The description of the developer product Price: The price of the developer product \"\"\" response = requests . session . post ( \"https://www.roblox.com/places/developerproducts/add\" , data = { \"universeId\" : self . Id , \"name\" : Name , \"priceInRobux\" : Price , \"description\" : Description }, ) id = re . findall ( r \"\\d\" , BeautifulSoup ( r . text , \"html.parser\" ) . find ( id = \"DeveloperProductStatus\" ) ) return DeveloperProduct ( Data = { \"Id\" : id , \"Name\" : Name , \"Description\" : Description , \"Price\" : Price , })","title":"create_developer_product()"},{"location":"reference/shared/base/","text":"ropython.shared.base Base This defines the base class that everything inherits except the client. Source code in ropython/shared/base.py class Base : \"\"\" This defines the base class that everything inherits except the client. \"\"\" def __repr__ ( self ) -> str : return f \"< { self . __class__ . __name__ } id= { self . Id } >\" def __int__ ( self ) -> int : return self . Id __int__ ( self ) -> int special Source code in ropython/shared/base.py def __int__ ( self ) -> int : return self . Id __repr__ ( self ) -> str special Source code in ropython/shared/base.py def __repr__ ( self ) -> str : return f \"< { self . __class__ . __name__ } id= { self . Id } >\"","title":"Base"},{"location":"reference/shared/base/#ropython.shared.base","text":"","title":"base"},{"location":"reference/shared/base/#ropython.shared.base.Base","text":"This defines the base class that everything inherits except the client. Source code in ropython/shared/base.py class Base : \"\"\" This defines the base class that everything inherits except the client. \"\"\" def __repr__ ( self ) -> str : return f \"< { self . __class__ . __name__ } id= { self . Id } >\" def __int__ ( self ) -> int : return self . Id","title":"Base"},{"location":"reference/shared/base/#ropython.shared.base.Base.__int__","text":"Source code in ropython/shared/base.py def __int__ ( self ) -> int : return self . Id","title":"__int__()"},{"location":"reference/shared/base/#ropython.shared.base.Base.__repr__","text":"Source code in ropython/shared/base.py def __repr__ ( self ) -> str : return f \"< { self . __class__ . __name__ } id= { self . Id } >\"","title":"__repr__()"},{"location":"reference/shared/developerproduct/","text":"ropython.shared.developerproduct DeveloperProduct ( Base ) Developer Product Class Source code in ropython/shared/developerproduct.py class DeveloperProduct ( Base ): \"\"\" Developer Product Class \"\"\" def __init__ ( self , Data : dict ): \"\"\" Initializes developer product class Attributes: Data: A dictionary including the product `Id`, `Name`, `Description`, and `Price`. \"\"\" self . Id = Data [ \"Id\" ] self . Name = Data [ \"Name\" ] self . Description = Data [ \"Description\" ] self . Price = Data [ \"Price\" ] __init__ ( self , Data : dict ) special Initializes developer product class Attributes: Name Type Description Data A dictionary including the product Id , Name , Description , and Price . Source code in ropython/shared/developerproduct.py def __init__ ( self , Data : dict ): \"\"\" Initializes developer product class Attributes: Data: A dictionary including the product `Id`, `Name`, `Description`, and `Price`. \"\"\" self . Id = Data [ \"Id\" ] self . Name = Data [ \"Name\" ] self . Description = Data [ \"Description\" ] self . Price = Data [ \"Price\" ]","title":"Developerproduct"},{"location":"reference/shared/developerproduct/#ropython.shared.developerproduct","text":"","title":"developerproduct"},{"location":"reference/shared/developerproduct/#ropython.shared.developerproduct.DeveloperProduct","text":"Developer Product Class Source code in ropython/shared/developerproduct.py class DeveloperProduct ( Base ): \"\"\" Developer Product Class \"\"\" def __init__ ( self , Data : dict ): \"\"\" Initializes developer product class Attributes: Data: A dictionary including the product `Id`, `Name`, `Description`, and `Price`. \"\"\" self . Id = Data [ \"Id\" ] self . Name = Data [ \"Name\" ] self . Description = Data [ \"Description\" ] self . Price = Data [ \"Price\" ]","title":"DeveloperProduct"},{"location":"reference/shared/developerproduct/#ropython.shared.developerproduct.DeveloperProduct.__init__","text":"Initializes developer product class Attributes: Name Type Description Data A dictionary including the product Id , Name , Description , and Price . Source code in ropython/shared/developerproduct.py def __init__ ( self , Data : dict ): \"\"\" Initializes developer product class Attributes: Data: A dictionary including the product `Id`, `Name`, `Description`, and `Price`. \"\"\" self . Id = Data [ \"Id\" ] self . Name = Data [ \"Name\" ] self . Description = Data [ \"Description\" ] self . Price = Data [ \"Price\" ]","title":"__init__()"},{"location":"reference/utils/exceptions/","text":"ropython.utils.exceptions RobloxException ( Exception ) Base exception that all custom exceptions will inherit Source code in ropython/utils/exceptions.py class RobloxException ( Exception ): \"\"\" Base exception that all custom exceptions will inherit \"\"\" pass","title":"Exceptions"},{"location":"reference/utils/exceptions/#ropython.utils.exceptions","text":"","title":"exceptions"},{"location":"reference/utils/exceptions/#ropython.utils.exceptions.RobloxException","text":"Base exception that all custom exceptions will inherit Source code in ropython/utils/exceptions.py class RobloxException ( Exception ): \"\"\" Base exception that all custom exceptions will inherit \"\"\" pass","title":"RobloxException"}]}